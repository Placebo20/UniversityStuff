Лабораторна робота №3а

Лабораторні роботи 3a та 3b є двома частинами однієї лабораторної
(присвяченої сортуванню), тому треба виконувати обидві частини для
отримання повних балів. Лабораторна робота 3c є також частиною тієї ж
лабораторної роботи; її виконання є необов’язковим, проте вона дозволить
отримати додаткові бали.
Реалізувати алгоритми сортування для заданої структури даних (список
1). Реалізувати наступні алгоритми:
1) простий алгоритм (список 2);
2) більш ефективний алгоритм quicksort (список 3);
3) більш ефективний алгоритм merge sort (список 4);
4) комбінований алгоритм, який використовує більш ефективний
алгоритм (один з quicksort чи merge sort) для великих масивів і
простий алгоритм для маленький масивів;
5) сортування з використанням бібліотечних функцій.
Варіантом у цій лабораторній роботі є вибір по одному пункту зі
списків 1,2,3,4.
Необхідно реалізувати наступні режими роботи:
1. Демонстраційний режим – задається розмір масиву, генерується
масив відповідного розміру, масив сортується різними
алгоритмами, виводяться проміжні кроки кожного алгоритму.
2. Автоматичний режим “benchmark” з вимірами швидкості роботи
кожного з алгоритмів.
Всі алгоритми мають працювати на однакових масивах. Варто
розглянути як випадкові масиви, так і майже відсортовані в правильному та
неправильному порядку (тобто якщо треба відсортувати за зростанням, то
розглянути масиви, майже відсортовані за зростанням – правильний порядок,
та за спаданням – неправильний порядок).
Для комбінованого алгоритму, розглянути різні значення порогу, коли
переходити від простого до більш ефективного алгоритму – і виміряти час
виконання для різних значень порогу, а також підібрати оптимальне значення
порогу. Алгоритм працює рекурсивно, і для маленьких підмасивів
переключається на більш простий алгоритм (наприклад, якщо поріг=10
елементів, на вхід подається масив з 10000 елементів, то спершу
використовується більш ефективний алгоритм, але на подальших кроках
може бути використаний більш простий алгоритм для сортування підмасивів
не більше 10 елементів).

Всі алгоритми мають бути реалізовані у вигляді однієї програми (з
однією функцією main). Варто не копіювати код, а виносити спільні
фрагменти коду в функції та викликати їх.
===========================================
Список 1: структури даних для сортування (якщо номер в списку не
менше 5, +трохи балів):
3. Дійсні числа, за зростанням
Список 2: прості алгоритми сортування:
1. Bubble sort
Список 3: Ефективний алгоритм сортування quicksort:
1. Lomuto partition scheme, rightmost pivot
Список 4: Ефективний алгоритм сортування merge sort:
1. top-down, two arrays