Лабораторна робота №1

Реалізувати «навчальну базу даних» - систему для роботи з даними
певного типу (див. варіанти 1-5 ). Необхідно реалізувати підтримку наступних
операцій:
1. Додавання елементів;
2. Зберігання даних (запис даних у файл);
3. Відновлення даних (зчитування даних з файлу);
4. Вивід всіх збережених даних;
5. Пошук за заданими критеріями (див. підваріанти a-c );
6. Модифікація елементів (додаткові бали);
7. Видалення елементів (додаткові бали).
Для зберігання елементів треба реалізувати наступні механізми:
1. Зберігання в пам’яті, без збереження на диск (можна використати
довільну структуру даних, зокрема бібліотечні структури на зразок
std::vector);
2. Зберігання у вигляді текстового файлу;
3. Зберігання у вигляді бінарного файлу.
За бажанням студентів, можна додатково реалізувати зберігання з
використанням якоїсь реляційної чи нереляційної бази даних (за це можна
отримати додаткові бали).
Кожен студент обирає один варіант (1-5) і один підваріант в цьому
варіанті (a-c).
Для кожного елементу, окрім описаних у відповідному варіанті даних,
треба також зберігати унікальний ID – ціле число, яке буде унікальним для
кожного елементу даних.
Для зберігання текстових даних (наприклад, назв, імен, повідомлень,
…) можна використовувати як рядки в стилі С, так і засоби С++ (наприклад,
std::string). Можна реалізувати обидва варіанти і порівняти їх ефективність
(за обсягом пам’яті та часом виконання) – за таке порівняння можна
отримати додаткові бали.
Аналогічно, для роботи з файлами можна використати як засоби С
(FILE*), так і засоби С++ (fstream). Можна реалізувати обидва варіанти і
порівняти ефективність – за таке порівняння можна отримати додаткові
бали. Можна порівнювати як всі 4 комбінації рядків-файлів (рядки С, файли
С – рядки С, файли С++ – рядки С++, файли С – рядки С++, файли С++), так і
лише «сумісні» комбінації (рядки С, файли С – рядки С++, файли С++).

Завдання передбачає, що обсяг файлів достатньо малий, щоб можна
було повністю завантажити всі дані в пам’ять. За бажання можна реалізувати
додатково можливість роботи з великими файлами, читаючи (та записуючи)
дані частинами. За правильну реалізацію таких можливостей можна отримати
додаткові бали.
Необхідно реалізувати зберігання даних, які вводить користувач, а
також генерацію випадкових даних для зберігання та пошуку. У випадку
зберігання даних на диск, ці дані мають залишатись доступними після
повного закриття та перезапуску програми. Тобто користувач може повністю
закрити програму, і навіть перезавантажити ОС, а після нового запуску
програми всі раніше збережені дані залишаються доступними і програма
може їх прочитати.
Необхідно реалізувати наступні режими роботи для реалізованої
програми:

1. Інтерактивний діалоговий режим – коли користувач може
вибирати, які операції виконувати та задавати необхідні
параметри.
2. Демонстраційний режим – задаються фіксовані значення
параметрів та послідовності виконання операцій, що
демонструють правильність роботи операцій в різних ситуаціях.
В цьому режимі користувач не має нічого вводити.
3. Автоматичний режим “benchmark” з вимірами ефективності
роботи різних механізмів зберігання.
В автоматичному режимі “benchmark” задається певне число елементів
N; генерується N випадкових елементів, вони додаються та зберігаються,
потім відновлюються і виконується пошук. При цьому вимірюється час
виконання операцій (з точністю до мілісекунд) та розмір збережених даних (в
байтах). Ця процедура виконується для всіх реалізованих механізмів
зберігання. Потім значення N збільшується, і виміри повторюються для
нового значення N. Така процедура повторюється, доки час виконання
операцій не стане більшим за 10 секунд. Результати вимірів для всіх
розглянутих значень N треба зберегти і надати викладачу під час здачі
лабораторної (наприклад, додавши відповідні файли в репозиторій з кодом
виконаних завдань).
Можливий варіант схеми збільшення параметру N:
 Починаємо з якогось фіксованого значення, наприклад N=10;
 Збільшуємо в геометричній прогресії (наприклад, вдвічі)
 Поки не досягли приблизно 10% від бажаного значення (час
виконання близько 1 секунди) – значення N_10

 Потім збільшуємо в арифметичній прогресії (N=N_10, 2*N_10,
3*N_10, …)
 Поки не досягли бажаного значення (час виконання більше 10
секунд)
Всі операції, механізми зберігання та режими роботи мають бути
реалізовані в рамках однієї програми (тобто один виконуваний файл, одна
функція main(), довільна кількість файлів з кодом).
======================================================
Мій Варіант
3)Інформація про монстрів у комп’ютерній грі. Зберігаються наступні
дані про кожного монстра: ім’я; кількість одиниць здоров’я (ціле число,
не більше 50000); кількість одиниць атаки (ціле число, не більше 1000);
шанс виконати спеціальну атаку (дійсне число від 0 до 1), тип
спеціальної атаки – збільшити пошкодження, повторити атаку,
вилікувати себе, паралізувати супротивника; дата та час появи у грі.
Критерії пошуку:
b. Монстри з іменем, що починається із заданого фрагменту тексту;
монстри із заданим типом спеціальної атаки та кількістю одиниць
атаки у заданому діапазоні; монстри, що з’явились у грі після
заданого часу.